!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra$/;"	m
INC	Makefile	/^INC = ..\/..\/inc$/;"	m
NAME	Makefile	/^NAME = bruteforce$/;"	m
OBJ	Makefile	/^OBJ = $(SRC:.c=.o)$/;"	m
SRC	Makefile	/^SRC = bf_bruteforce.c bf_debug.c bf_op.c bf_main.c bf_recursive_bruteforce.c$/;"	m
bf_is_sorted	bf_bruteforce.c	/^int		bf_is_sorted(t_tabs *tab)$/;"	f
bf_printseed	bf_debug.c	/^int		bf_printseed(int *seed)$/;"	f
bf_printtab	bf_debug.c	/^int		bf_printtab(t_tabs *tab)$/;"	f
bf_push_a	bf_op.c	/^int		bf_push_a(t_tabs *tab)$/;"	f
bf_push_b	bf_op.c	/^int		bf_push_b(t_tabs *tab)$/;"	f
bf_revrotate_a	bf_op.c	/^int		bf_revrotate_a(t_tabs *tab)$/;"	f
bf_revrotate_ab	bf_op.c	/^int		bf_revrotate_ab(t_tabs *tab)$/;"	f
bf_revrotate_b	bf_op.c	/^int		bf_revrotate_b(t_tabs *tab)$/;"	f
bf_rotate_a	bf_op.c	/^int		bf_rotate_a(t_tabs *tab)$/;"	f
bf_rotate_ab	bf_op.c	/^int		bf_rotate_ab(t_tabs *tab)$/;"	f
bf_rotate_b	bf_op.c	/^int		bf_rotate_b(t_tabs *tab)$/;"	f
bf_seed_generator	bf_bruteforce.c	/^int		bf_seed_generator(t_tabs *tab, int *seed, int head, int len)$/;"	f
bf_seed_try	bf_bruteforce.c	/^int		bf_seed_try(t_tabs *tab, int *seed)$/;"	f
bf_swap_a	bf_op.c	/^int		bf_swap_a(t_tabs *tab)$/;"	f
bf_swap_ab	bf_op.c	/^int		bf_swap_ab(t_tabs *tab)$/;"	f
bf_swap_b	bf_op.c	/^int		bf_swap_b(t_tabs *tab)$/;"	f
bruteforce	bf_bruteforce.c	/^int		bruteforce(t_tabs *tab)$/;"	f
combination_five	combi.c	/^int		combination_five(int comb)$/;"	f
combination_five	instant.c	/^int		combination_five(int comb)$/;"	f
init_a_locked_bf	bf_init.c	/^int     init_a_locked_bf(int *cmb, int len, t_tab *piles)$/;"	f
init_a_unlocked_bf	bf_init.c	/^int     init_a_unlocked_bf(int *cmb, int len, t_tab *piles)$/;"	f
init_b_locked_bf	bf_init.c	/^int     init_b_locked_bf(int *cmb, int len, t_tab *piles)$/;"	f
init_bf	bf_main.c	/^int     init_bf(int *cmb, int len)$/;"	f
little_solution	instant.c	/^char	*little_solution(int comb)$/;"	f
main	bf_main.c	/^int     main(void)$/;"	f
main	combi.c	/^int		main(void)$/;"	f
main	instant.c	/^int		main(void)$/;"	f
make_op	bf_recursive_bruteforce.c	/^int		make_op(t_tabs *tab, int op)$/;"	f
next_cmb	bf_main.c	/^int     next_cmb(int *cmb, int head, int len)$/;"	f
op_usefull	bf_recursive_bruteforce.c	/^int		op_usefull(int	both_op)$/;"	f
read_seed	bf_init.c	/^void	read_seed(int *seed, t_tab *tab)$/;"	f
read_solution	instant.c	/^int		read_solution(char *solution, t_tab tab)$/;"	f
rec_bruteforce	bf_recursive_bruteforce.c	/^int		rec_bruteforce(t_tabs *tab, int *seed)$/;"	f
rec_try	bf_recursive_bruteforce.c	/^int		rec_try(t_tabs tab, int *seed, int head, int len)$/;"	f
solution_five	combi.c	/^char	*solution_five(int index)$/;"	f
solution_five	instant.c	/^char	*solution_five(int index)$/;"	f
usefull_cmb	bf_main.c	/^int     usefull_cmb(int *cmb, int head)$/;"	f
